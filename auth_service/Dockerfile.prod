# Multi-stage Dockerfile for production deployment

###############
# BUILD STAGE #
###############
FROM python:3.12-slim AS builder

# Set environment variables
ENV POETRY_NO_INTERACTION=1 \
    POETRY_VIRTUALENVS_IN_PROJECT=true \
    POETRY_VIRTUALENVS_CREATE=true \
    PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1

# Install poetry
RUN pip install poetry

WORKDIR /app

# Copy only files needed for dependency installation
COPY pyproject.toml poetry.lock ./

# Install only production dependencies into the project's .venv folder
# The --no-root flag tells poetry to only install dependencies, not the project itself.
RUN poetry install --no-root --only main --no-interaction --no-ansi


################
# RUNTIME STAGE #
################
FROM python:3.12-slim AS final

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONPATH=/app/src

WORKDIR /app

# Create a non-root user for security
RUN addgroup --system app && adduser --system --ingroup app app

# Copy the virtual environment from the builder stage
COPY --from=builder /app/.venv /app/.venv

# Copy the application source code
COPY ./src ./src
COPY ./alembic.ini ./alembic.ini
COPY ./alembic ./alembic

# Activate the virtual environment by adding it to the PATH
ENV PATH="/app/.venv/bin:$PATH"

# Set ownership to the non-root user
RUN chown -R app:app /app

# Switch to the non-root user
USER app

EXPOSE 8000

# The command to run the application using the venv's python.
# No 'poetry run' is needed. Using 4 workers for production.
CMD ["uvicorn", "auth_service.main:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "4"]