# k8s/auth/migration-job.yaml - Migration job for Auth Service
apiVersion: batch/v1
kind: Job
metadata:
  name: auth-service-migrations # Name of the migration job
  namespace: default # Or the namespace where your app will be deployed
  labels:
    app: auth-service
    component: migrations
spec:
  template:
    metadata:
      labels:
        app: auth-service
        component: migrations
    spec:
      containers:
        - name: auth-service-migrator
          image: ${DOCKER_IMAGE_TAG} # Placeholder, will be replaced by CI/CD
          # Using a shell script to provide better debugging output
          command: ["/bin/bash", "-c"]
          args:
            - |
              echo "=== Starting database migration job ==="
              echo "=== Debugging Environment Variables ==="
              echo "Complete environment dump:"
              env | sort
              
              echo "\n=== Checking Supabase Environment Variables ==="
              echo "AUTH_SERVICE_SUPABASE_URL exists: $(if [ -n "$AUTH_SERVICE_SUPABASE_URL" ]; then echo YES; else echo NO; fi)"
              echo "AUTH_SERVICE_SUPABASE_URL length: ${#AUTH_SERVICE_SUPABASE_URL}"
              echo "AUTH_SERVICE_SUPABASE_ANON_KEY exists: $(if [ -n "$AUTH_SERVICE_SUPABASE_ANON_KEY" ]; then echo YES; else echo NO; fi)"
              echo "AUTH_SERVICE_SUPABASE_ANON_KEY length: ${#AUTH_SERVICE_SUPABASE_ANON_KEY}"
              echo "AUTH_SERVICE_SUPABASE_SERVICE_ROLE_KEY exists: $(if [ -n "$AUTH_SERVICE_SUPABASE_SERVICE_ROLE_KEY" ]; then echo YES; else echo NO; fi)"
              echo "AUTH_SERVICE_SUPABASE_SERVICE_ROLE_KEY length: ${#AUTH_SERVICE_SUPABASE_SERVICE_ROLE_KEY}"
              echo "AUTH_SERVICE_M2M_JWT_SECRET_KEY exists: $(if [ -n "$AUTH_SERVICE_M2M_JWT_SECRET_KEY" ]; then echo YES; else echo NO; fi)"
              echo "AUTH_SERVICE_M2M_JWT_SECRET_KEY length: ${#AUTH_SERVICE_M2M_JWT_SECRET_KEY}"
              
              echo "\n=== Testing kubernetes secrets volume files ==="
              # Check if we can see secrets mounted as files (alternative access method)
              ls -la /var/run/secrets/kubernetes.io/ || echo "No Kubernetes secrets mounted"
              
              echo "\n=== Installing required packages ==="
              pip install psycopg sqlalchemy alembic
              
              echo "\n=== Testing database connection ==="
              python -c "import os, psycopg; conn = psycopg.connect(os.environ.get('AUTH_SERVICE_DATABASE_URL').replace('postgresql+psycopg://', 'postgresql://'), connect_timeout=10); conn.close()" || { echo "Database connection failed"; exit 1; }
              echo "Database connection successful. Starting migration..."
              
              # Set verbose logging for alembic
              export PYTHONPATH=/app:$PYTHONPATH
              export ALEMBIC_VERBOSE=1
              
              # Run the migration with a timeout
              echo "\n=== Running migrations ==="
              timeout 600 alembic upgrade head
              
              # Check exit status
              STATUS=$?
              if [ $STATUS -eq 0 ]; then
                echo "=== Migration completed successfully ==="
                exit 0
              else
                echo "=== Migration failed with status $STATUS ==="
                echo "Checking database connection one more time..."
                python -c "import asyncio, asyncpg, os; asyncio.run(asyncio.wait_for(asyncpg.connect(os.environ.get('AUTH_SERVICE_DATABASE_URL').replace('postgresql+asyncpg://', 'postgresql://')), timeout=10))"
                echo "=== Reviewing alembic history ==="
                alembic history
                echo "=== Current database migration version ==="
                alembic current
                exit $STATUS
              fi
          envFrom:
            - secretRef:
                name: auth-service-secrets
          env:
            # Try both approaches: envFrom (above) and direct valueFrom (below)
            # This gives us redundancy in case one approach isn't working
            - name: AUTH_SERVICE_SUPABASE_URL_DIRECT
              valueFrom:
                secretKeyRef:
                  name: auth-service-secrets
                  key: AUTH_SERVICE_SUPABASE_URL
                  optional: true
            - name: AUTH_SERVICE_SUPABASE_ANON_KEY_DIRECT
              valueFrom:
                secretKeyRef:
                  name: auth-service-secrets
                  key: AUTH_SERVICE_SUPABASE_ANON_KEY
                  optional: true
            - name: AUTH_SERVICE_SUPABASE_SERVICE_ROLE_KEY_DIRECT
              valueFrom:
                secretKeyRef:
                  name: auth-service-secrets
                  key: AUTH_SERVICE_SUPABASE_SERVICE_ROLE_KEY
                  optional: true
            - name: AUTH_SERVICE_M2M_JWT_SECRET_KEY_DIRECT
              valueFrom:
                secretKeyRef:
                  name: auth-service-secrets
                  key: AUTH_SERVICE_M2M_JWT_SECRET_KEY
                  optional: true
            - name: ENVIRONMENT
              value: "production"
            - name: PYTHONUNBUFFERED
              value: "1"
            # Add dedicated timeout value
            - name: ALEMBIC_TIMEOUT
              value: "600"
          resources:
            requests:
              cpu: "100m"
              memory: "256Mi"
            limits:
              cpu: "500m" 
              memory: "512Mi"
      restartPolicy: Never
      # Add a reasonable timeout for the job
      activeDeadlineSeconds: 900 # 15 minutes timeout for the entire job
  backoffLimit: 2
  ttlSecondsAfterFinished: 3600
