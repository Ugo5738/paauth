# k8s/migration-job-debug.yaml - Enhanced debugging version
apiVersion: batch/v1
kind: Job
metadata:
  name: paauth-migrations-debug
  namespace: default
  labels:
    app: paauth
    component: migrations-debug
spec:
  backoffLimit: 0  # Don't retry automatically
  ttlSecondsAfterFinished: 3600
  template:
    metadata:
      labels:
        app: paauth
        component: migrations-debug
    spec:
      containers:
        - name: paauth-migrator-debug
          image: DOCKER_REGISTRY_PLACEHOLDER/paauth:IMAGE_TAG_PLACEHOLDER
          command: ["/bin/bash", "-c"]
          args:
            - |
              echo "===== STARTING MIGRATION DEBUG SESSION ====="
              echo "Current directory: $(pwd)"
              
              # Show environment information
              echo "===== ENVIRONMENT INFO ====="
              python --version
              pip list | grep -E "alembic|sqlalchemy|asyncpg"
              
              # Show database connection string (obfuscated)
              echo "===== CONNECTION STRING ====="
              # Extract just the host and database name for debugging without exposing credentials
              python -c "import os, re; conn_str = os.environ.get('AUTH_SERVICE_DATABASE_URL', ''); match = re.search(r'@([^:]+)(?::\d+)?/([^?]+)', conn_str); print(f'Host: {match.group(1) if match else \"Not matched\"}, Database: {match.group(2) if match else \"Not matched\"}')"
              
              # Test direct database connectivity first
              echo "===== TESTING DATABASE CONNECTION ====="
              python -c "
              import asyncio, asyncpg, os, time

              async def test_connection():
                  print('Attempting database connection...')
                  conn_string = os.environ.get('AUTH_SERVICE_DATABASE_URL').replace('postgresql+asyncpg://', 'postgresql://')
                  
                  max_retries = 3
                  retry_count = 0
                  
                  while retry_count < max_retries:
                      try:
                          print(f'Connection attempt {retry_count + 1}/{max_retries}...')
                          start_time = time.time()
                          conn = await asyncio.wait_for(asyncpg.connect(conn_string), timeout=10)
                          end_time = time.time()
                          print(f'Connection successful! Time taken: {end_time - start_time:.2f} seconds')
                          
                          # Test a simple query
                          print('Testing query...')
                          version = await conn.fetchval('SELECT version()')
                          print(f'Database version: {version}')
                          
                          await conn.close()
                          return True
                      except Exception as e:
                          print(f'Connection failed: {str(e)}')
                          retry_count += 1
                          if retry_count < max_retries:
                              print(f'Waiting 5 seconds before retry...')
                              await asyncio.sleep(5)
                          else:
                              print('All connection attempts failed.')
                              return False
              
              asyncio.run(test_connection())
              "

              # Check if alembic config exists
              echo "===== CHECKING ALEMBIC CONFIG ====="
              ls -la alembic.ini
              ls -la alembic/
              ls -la alembic/versions/
              
              # Show current database status
              echo "===== ALEMBIC CURRENT STATUS ====="
              alembic current
              echo "===== ALEMBIC HISTORY ====="
              alembic history

              # Run migrations with very explicit debugging
              echo "===== RUNNING MIGRATIONS WITH DEBUG ====="
              export PYTHONPATH=/app:$PYTHONPATH
              echo "Setting PYTHONPATH=$PYTHONPATH"
              cd /app && alembic upgrade head --verbose

              # Check exit status
              STATUS=$?
              echo "===== MIGRATION COMPLETE ====="
              echo "Exit status: $STATUS"
              
              if [ $STATUS -ne 0 ]; then
                echo "Migration FAILED. See errors above."
                exit $STATUS
              else 
                echo "Migration SUCCEEDED!"
                echo "===== FINAL DATABASE STATE ====="
                alembic current
              fi
          envFrom:
            - secretRef:
                name: paauth-secrets
          env:
            - name: PYTHONUNBUFFERED
              value: "1"
            - name: ALEMBIC_VERBOSE
              value: "1"
          resources:
            requests:
              cpu: "200m" 
              memory: "256Mi"
            limits:
              cpu: "500m"
              memory: "512Mi"
      restartPolicy: Never
