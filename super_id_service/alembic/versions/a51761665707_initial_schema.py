"""initial_schema

Revision ID: a51761665707
Revises: 
Create Date: 2025-06-12 18:00:32.828732

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'a51761665707'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('generated_super_ids',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('super_id', sa.UUID(), nullable=False),
    sa.Column('generated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('requested_by_client_id', sa.String(), nullable=True),
    sa.Column('super_id_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('super_id')
    )
    op.drop_index(op.f('idx_super_id_audit_logs_performed_at'), table_name='super_id_audit_logs')
    op.drop_index(op.f('idx_super_id_audit_logs_super_id'), table_name='super_id_audit_logs')
    op.drop_table('super_id_audit_logs')
    op.drop_index(op.f('idx_super_ids_created_at'), table_name='super_ids')
    op.drop_index(op.f('idx_super_ids_created_by'), table_name='super_ids')
    op.drop_index(op.f('idx_super_ids_entity_type'), table_name='super_ids')
    op.drop_index(op.f('idx_super_ids_tenant_id'), table_name='super_ids')
    op.drop_table('super_ids')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('super_ids',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('tenant_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('entity_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('entity_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('external_ref', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='super_ids_pkey'),
    comment='Stores all generated Super IDs for tracking workflows across services',
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('idx_super_ids_tenant_id'), 'super_ids', ['tenant_id'], unique=False)
    op.create_index(op.f('idx_super_ids_entity_type'), 'super_ids', ['entity_type'], unique=False)
    op.create_index(op.f('idx_super_ids_created_by'), 'super_ids', ['created_by'], unique=False)
    op.create_index(op.f('idx_super_ids_created_at'), 'super_ids', ['created_at'], unique=False)
    op.create_table('super_id_audit_logs',
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('super_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('action', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('performed_by', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('performed_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('details', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['super_id'], ['super_ids.id'], name=op.f('super_id_audit_logs_super_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('super_id_audit_logs_pkey')),
    comment='Audit trail for all changes to Super IDs'
    )
    op.create_index(op.f('idx_super_id_audit_logs_super_id'), 'super_id_audit_logs', ['super_id'], unique=False)
    op.create_index(op.f('idx_super_id_audit_logs_performed_at'), 'super_id_audit_logs', ['performed_at'], unique=False)
    op.drop_table('generated_super_ids')
    # ### end Alembic commands ###
