# name: Continuous Integration

# on:
#   push:
#     branches: [ main, develop ]
#   pull_request:
#     branches: [ main, develop ]

# jobs:
#   lint-and-test:
#     runs-on: ubuntu-latest
#     env:
#       PYTHONUNBUFFERED: 1
#       SUPABASE_URL: http://localhost:8000
#       SUPABASE_ANON_KEY: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.CRXP1A7WOeoJeXxjNni43kdQwgnWNReilDMblYTn_I0
#       SUPABASE_SERVICE_ROLE_KEY: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImV4cCI6MTk4MzgxMjk5Nn0.EGIM96RAZx35lJzdJsyH-qQwv8Hdp7fsn3W0YpN81IU
#       M2M_JWT_SECRET_KEY: a0c4610f8b6783e6a51d8dc0203f13f2a4a5b4495713fbc9805cce2bc45910ba
#       AUTH_SERVICE_DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/postgres
#       ROOT_PATH: /api/v1
#       ENVIRONMENT: testing
#       LOGGING_LEVEL: INFO
#       RATE_LIMIT_LOGIN: 5/minute
#       RATE_LIMIT_REGISTER: 5/minute
#       RATE_LIMIT_TOKEN: 10/minute
#       RATE_LIMIT_PASSWORD_RESET: 3/minute

#     services:
#       # PostgreSQL service container for testing
#       postgres:
#         image: postgres:15
#         env:
#           POSTGRES_USER: postgres
#           POSTGRES_PASSWORD: postgres
#           POSTGRES_DB: postgres
#         ports:
#           - 5432:5432
#         options: >-
#           --health-cmd pg_isready
#           --health-interval 10s
#           --health-timeout 5s
#           --health-retries 5

#     steps:
#       - uses: actions/checkout@v3

#       - name: Set up Python 3.12
#         uses: actions/setup-python@v4
#         with:
#           python-version: '3.12'

#       - name: Install Poetry
#         uses: snok/install-poetry@v1
#         with:
#           version: 1.7.1
#           virtualenvs-create: true

#       - name: Configure Poetry
#         run: poetry config virtualenvs.in-project true

#       - name: Install dependencies
#         working-directory: ./auth_service
#         run: poetry install

#       - name: Lint with Ruff
#         working-directory: ./auth_service
#         run: poetry run ruff .

#       - name: Format check with Black
#         working-directory: ./auth_service
#         run: poetry run black --check .

#       - name: Type check with MyPy
#         working-directory: ./auth_service
#         run: poetry run mypy .

#       - name: Run migrations
#         working-directory: ./auth_service
#         run: poetry run alembic upgrade head

#       - name: Run tests
#         working-directory: ./auth_service
#         run: poetry run pytest --cov=auth_service --cov-report=xml

#       - name: Upload coverage to Codecov
#         uses: codecov/codecov-action@v3
#         with:
#           file: ./auth_service/coverage.xml
#           fail_ci_if_error: false

#   build-docker:
#     runs-on: ubuntu-latest
#     needs: lint-and-test
#     steps:
#       - uses: actions/checkout@v3

#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v2

#       - name: Build Docker image
#         uses: docker/build-push-action@v4
#         with:
#           context: ./auth_service
#           file: ./auth_service/Dockerfile.prod
#           push: false
#           tags: auth_service:${{ github.sha }}
#           cache-from: type=gha
#           cache-to: type=gha,mode=max
